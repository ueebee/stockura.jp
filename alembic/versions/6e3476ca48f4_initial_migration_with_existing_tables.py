"""Initial migration with existing tables

Revision ID: 6e3476ca48f4
Revises:
Create Date: 2025-07-29 00:41:14.742885

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6e3476ca48f4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create listed_info table
    op.create_table(
        "listed_info",
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("code", sa.String(length=10), nullable=False),
        sa.Column("company_name", sa.String(length=255), nullable=False),
        sa.Column("company_name_english", sa.String(length=255), nullable=True),
        sa.Column("sector_17_code", sa.String(length=10), nullable=True),
        sa.Column("sector_17_code_name", sa.String(length=255), nullable=True),
        sa.Column("sector_33_code", sa.String(length=10), nullable=True),
        sa.Column("sector_33_code_name", sa.String(length=255), nullable=True),
        sa.Column("scale_category", sa.String(length=50), nullable=True),
        sa.Column("market_code", sa.String(length=10), nullable=True),
        sa.Column("market_code_name", sa.String(length=50), nullable=True),
        sa.Column("margin_code", sa.String(length=10), nullable=True),
        sa.Column("margin_code_name", sa.String(length=50), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.PrimaryKeyConstraint("date", "code"),
    )
    op.create_index("idx_listed_info_code", "listed_info", ["code"], unique=False)
    op.create_index("idx_listed_info_date", "listed_info", ["date"], unique=False)
    
    op.create_table(
        "prices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ticker_symbol", sa.String(length=10), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("open", sa.Float(), nullable=False),
        sa.Column("high", sa.Float(), nullable=False),
        sa.Column("low", sa.Float(), nullable=False),
        sa.Column("close", sa.Float(), nullable=False),
        sa.Column("volume", sa.Integer(), nullable=False),
        sa.Column("adjusted_close", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("ticker_symbol", "timestamp", name="uq_prices_ticker_timestamp"),
    )
    op.create_index(op.f("ix_prices_id"), "prices", ["id"], unique=False)
    op.create_index(op.f("ix_prices_ticker_symbol"), "prices", ["ticker_symbol"], unique=False)
    op.create_index(op.f("ix_prices_timestamp"), "prices", ["timestamp"], unique=False)
    op.create_table(
        "stocks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ticker_symbol", sa.String(length=10), nullable=False),
        sa.Column("company_name", sa.String(length=255), nullable=False),
        sa.Column("market", sa.String(length=50), nullable=False),
        sa.Column("sector", sa.String(length=100), nullable=True),
        sa.Column("industry", sa.String(length=100), nullable=True),
        sa.Column("market_cap", sa.Float(), nullable=True),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("ticker_symbol", name="uq_stocks_ticker_symbol"),
    )
    op.create_index(op.f("ix_stocks_id"), "stocks", ["id"], unique=False)
    op.create_index(op.f("ix_stocks_market"), "stocks", ["market"], unique=False)
    op.create_index(op.f("ix_stocks_sector"), "stocks", ["sector"], unique=False)
    op.create_index(op.f("ix_stocks_ticker_symbol"), "stocks", ["ticker_symbol"], unique=False)
    
    # Drop unnecessary data_sources table if exists
    op.execute("DROP TABLE IF EXISTS data_sources CASCADE")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_stocks_ticker_symbol"), table_name="stocks")
    op.drop_index(op.f("ix_stocks_sector"), table_name="stocks")
    op.drop_index(op.f("ix_stocks_market"), table_name="stocks")
    op.drop_index(op.f("ix_stocks_id"), table_name="stocks")
    op.drop_table("stocks")
    op.drop_index(op.f("ix_prices_timestamp"), table_name="prices")
    op.drop_index(op.f("ix_prices_ticker_symbol"), table_name="prices")
    op.drop_index(op.f("ix_prices_id"), table_name="prices")
    op.drop_table("prices")
    op.drop_index("idx_listed_info_date", table_name="listed_info")
    op.drop_index("idx_listed_info_code", table_name="listed_info")
    op.drop_table("listed_info")
    # ### end Alembic commands ###
