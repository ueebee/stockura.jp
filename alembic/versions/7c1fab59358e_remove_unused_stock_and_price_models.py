"""Remove unused stock and price models

Revision ID: 7c1fab59358e
Revises: 6e3476ca48f4
Create Date: 2025-07-29 15:18:52.723461

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7c1fab59358e"
down_revision: Union[str, None] = "6e3476ca48f4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_prices_id", table_name="prices")
    op.drop_index("ix_prices_ticker_symbol", table_name="prices")
    op.drop_index("ix_prices_timestamp", table_name="prices")
    op.drop_table("prices")
    op.drop_index("ix_stocks_id", table_name="stocks")
    op.drop_index("ix_stocks_market", table_name="stocks")
    op.drop_index("ix_stocks_sector", table_name="stocks")
    op.drop_index("ix_stocks_ticker_symbol", table_name="stocks")
    op.drop_table("stocks")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "stocks",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ticker_symbol", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column("company_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("market", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("sector", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("industry", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("market_cap", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="stocks_pkey"),
        sa.UniqueConstraint(
            "ticker_symbol", name="uq_stocks_ticker_symbol", postgresql_include=[], postgresql_nulls_not_distinct=False
        ),
    )
    op.create_index("ix_stocks_ticker_symbol", "stocks", ["ticker_symbol"], unique=False)
    op.create_index("ix_stocks_sector", "stocks", ["sector"], unique=False)
    op.create_index("ix_stocks_market", "stocks", ["market"], unique=False)
    op.create_index("ix_stocks_id", "stocks", ["id"], unique=False)
    op.create_table(
        "prices",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ticker_symbol", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column("timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("open", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("high", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("low", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("close", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("volume", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("adjusted_close", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="prices_pkey"),
        sa.UniqueConstraint(
            "ticker_symbol",
            "timestamp",
            name="uq_prices_ticker_timestamp",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index("ix_prices_timestamp", "prices", ["timestamp"], unique=False)
    op.create_index("ix_prices_ticker_symbol", "prices", ["ticker_symbol"], unique=False)
    op.create_index("ix_prices_id", "prices", ["id"], unique=False)
    # ### end Alembic commands ###
