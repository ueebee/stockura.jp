[pytest]
# pytestの最小バージョン要件
minversion = 7.0

# テストファイルを検索するディレクトリ
testpaths = tests

# テストファイルとして認識するパターン
python_files = test_*.py *_test.py

# テストクラスとして認識するパターン
python_classes = Test* *Tests

# テスト関数として認識するパターン
python_functions = test_*

# asyncioモードの設定（自動的に非同期テストを検出）
asyncio_mode = auto

# カスタムマーカーの定義
markers =
    slow: 実行に時間がかかるテスト（デフォルトでスキップ）
    integration: 統合テスト（データベースや外部サービスとの連携）
    e2e: エンドツーエンドテスト（完全なアプリケーション動作）
    performance: パフォーマンステスト（実行時間やリソース使用量）
    external_api: 外部APIを使用するテスト（モック推奨）
    unit: 単体テスト（デフォルト）

# デフォルトのコマンドラインオプション
addopts = 
    # 厳密なマーカーチェック（未定義のマーカー使用を防ぐ）
    --strict-markers
    # エラー時のトレースバックを短縮表示
    --tb=short
    # 警告を無効化（必要に応じて有効化）
    --disable-warnings
    # カラー出力を有効化
    --color=yes
    # テスト実行の詳細度（-vで詳細、-vvでより詳細）
    -v
    # カバレッジ測定を有効化（初回実行時はコメントアウト）
    # --cov=app
    # カバレッジレポートをターミナルに表示
    # --cov-report=term
    # HTMLカバレッジレポートを生成
    # --cov-report=html
    # カバレッジの閾値（80%未満でエラー）
    # --cov-fail-under=80
    # 最初のエラーで停止（CIでは無効化推奨）
    # --exitfirst
    # 前回失敗したテストを最初に実行
    --failed-first
    # テスト実行時間を表示（遅いテストの特定）
    --durations=10

# ログ設定
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# ログファイル設定
log_file = tests/test.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# タイムアウト設定（秒）- pytest-timeoutプラグインが必要
# timeout = 300
# timeout_method = thread

# 警告フィルター
filterwarnings =
    # デフォルトですべての警告をエラーとして扱う
    error
    # 特定の警告を無視
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # SQLAlchemyの特定の警告を無視
    ignore::sqlalchemy.exc.SAWarning
    # pytest関連の警告を無視
    ignore::pytest.PytestUnraisableExceptionWarning

# テスト検出時に除外するディレクトリ
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    venv
    .venv
    virtualenv
    __pycache__
    .pytest_cache
    htmlcov
    .coverage
    migrations
    alembic

# Docstringからテストを収集するか
doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE

# パラレル実行の設定（pytest-xdistを使用する場合）
# -n auto オプションで自動的にCPUコア数に応じて並列化

# カスタムコレクション無視パターン
# collect_ignore = ["setup.py", "conftest.py"]
# collect_ignore_glob = ["*_backup.py", "*.bak"]

# アサーション書き換えを行うモジュール
# python_classes = Test* *Tests *TestCase（上で既に定義済み）

# JUnitスタイルのXMLレポート設定（CI用）
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true