services:
  postgres:
    image: postgres:16
    container_name: stockura-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-stockura}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stockura_password}
      POSTGRES_DB: ${POSTGRES_DB:-stockura}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stockura}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stockura-network

  redis:
    image: redis:7
    container_name: stockura-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stockura-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stockura-app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-stockura}:${POSTGRES_PASSWORD:-stockura_password}@postgres:5432/${POSTGRES_DB:-stockura}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
      - ./scripts:/app/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stockura-network
    command: >
      sh -c "
        python scripts/db_migrate.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: stockura-celery-worker
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-stockura}:${POSTGRES_PASSWORD:-stockura_password}@postgres:5432/${POSTGRES_DB:-stockura}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stockura-network
    command: celery -A app.infrastructure.celery.app worker --loglevel=info

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: stockura-celery-beat
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-stockura}:${POSTGRES_PASSWORD:-stockura_password}@postgres:5432/${POSTGRES_DB:-stockura}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    networks:
      - stockura-network
    command: celery -A app.infrastructure.celery.app beat --loglevel=info

  flower:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: stockura-flower
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - stockura-network
    command: celery -A app.infrastructure.celery.app flower --port=5555

volumes:
  postgres_data:
  redis_data:

networks:
  stockura-network:
    driver: bridge